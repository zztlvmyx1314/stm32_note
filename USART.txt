
/****************************相关结构体************************/

 typedef struct
{
 USART_TypeDef *Instance; 

 UART_InitTypeDef Init; 

 uint8_t *pTxBuffPtr; 

 uint16_t TxXferSize; 

 __IO uint16_t TxXferCount;

 uint8_t *pRxBuffPtr; 

 uint16_t RxXferSize; 

 __IO uint16_t RxXferCount; 

 DMA_HandleTypeDef *hdmatx; 

 DMA_HandleTypeDef *hdmarx; 

 HAL_LockTypeDef Lock; 

 __IO HAL_UART_StateTypeDef gState; 

__IO HAL_UART_StateTypeDef RxState;

 __IO uint32_t ErrorCode; 

}UART_HandleTypeDef;         //  串口句柄结构体



typedef struct
{
 uint32_t BaudRate; //波特率

 uint32_t WordLength; //字长

 uint32_t StopBits; //停止位

 uint32_t Parity; //奇偶校验

 uint32_t Mode; //收/发模式设置

 uint32_t HwFlowCtl; //硬件流设置

 uint32_t OverSampling; //过采样设置

}UART_InitTypeDef                       // 初始化串口结构体


/****************************配置步骤************************/

1) 串口参数初始化（波特率/停止位等），并使能串口。


UART_HandleTypeDef UART1_Handler; //UART 句柄

UART1_Handler.Instance=USART1; //USART1

UART1_Handler.Init.BaudRate=115200; //波特率

UART1_Handler.Init.WordLength=UART_WORDLENGTH_8B; //字长为 8 位格式

UART1_Handler.Init.StopBits=UART_STOPBITS_1; //一个停止位

UART1_Handler.Init.Parity=UART_PARITY_NONE; //无奇偶校验位

UART1_Handler.Init.HwFlowCtl=UART_HWCONTROL_NONE; //无硬件流控

UART1_Handler.Init.Mode=UART_MODE_TX_RX; //收发模式

HAL_UART_Init(&UART1_Handler);  //HAL_UART_Init()会使能 UART1

__HAL_UART_ENABLE(handler); //使能句柄 handler 指定的串口(单独使能串口函数)
__HAL_UART_DISABLE(handler); //关闭句柄 handler 指定的串口

HAL_UART_Receive_IT(&UART1_Handler, (u8 *)aRxBuffer, RXBUFFERSIZE);
//该函数会开启接收中断：标志位 UART_IT_RXNE，并且设置接收缓冲以
//及接收缓冲接收最大数据量



2）使能串口和 GPIO 口时钟(写在 HAL_UART_MspInit())


__HAL_RCC_USART1_CLK_ENABLE(); //使能 USART1 时钟

__HAL_RCC_GPIOA_CLK_ENABLE(); //使能 GPIOA 时钟


3）GPIO 口初始化设置（速度，上下拉等）以及复用映射配置(写在 HAL_UART_MspInit())

GPIO_Initure.Pin=GPIO_PIN_9; //PA9

GPIO_Initure.Mode=GPIO_MODE_AF_PP; //复用推挽输出

GPIO_Initure.Pull=GPIO_PULLUP; //上拉

GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH; //高速

HAL_GPIO_Init(GPIOA,&GPIO_Initure); //初始化 PA9

GPIO_Initure.Pin=GPIO_PIN_10; //PA10

GPIO_Initure.Mode=GPIO_MODE_AF_INPUT; //模式要设置为复用输入模式！

HAL_GPIO_Init(GPIOA,&GPIO_Initure); //初始化 PA10


3） 开启串口相关中断，配置串口中断优先级((写在 HAL_UART_MspInit()))


__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);  //开启接收完成中断

__HAL_UART_DISABLE_IT(huart,UART_IT_RXNE); //关闭接收完成中断

HAL_NVIC_EnableIRQ(USART1_IRQn); //使能 USART1 中断通道
HAL_NVIC_SetPriority(USART1_IRQn,3,3); //抢占优先级 3，子优先级 3


4） 编写中断服务函数


void USART1_IRQHandler(void) // USART1中断服务函数
{

HAL_UART_IRQHandler(&UART1_Handler); //调用 HAL 库中断处理公用函数
 …//中断处理完成后的结束工作

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)  // 接收中断回调函数

5） 串口数据接收和发送

HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout); // 发送

HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout); // 接收




/**********************中断回调函数********************/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart);//发送完成回调函数

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart);//发送完成过半

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);//接收完成回调函数

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart);//接收完成过半

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart);//错误处理回调函数


